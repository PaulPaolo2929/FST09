STEP 8 — CRUD OPERATIONS (Complete Step-by-Step Guide)
=====================================================

GOAL
----
Create a complete Create-Read-Update-Delete system for students,
using an independent view `studentRecords.blade.php` so existing files are not changed.

ASSUMPTIONS
-----------
- Project folder: STUDYLARAVEL
- Database configured and migrated (students table exists)
- Student model exists (app/Models/Student.php)
- You want an independent page at /student-records

OVERVIEW
--------
1. Create controller
2. Add controller methods: index, store, update, destroy
3. Register routes
4. Create independent Blade view: studentRecords.blade.php
5. Ensure Student model has $fillable
6. Test and troubleshoot

STEP-BY-STEP
------------

1) CREATE CONTROLLER
---------------------
Run in terminal (project root):
php artisan make:controller StudentRecordController

This creates:
app/Http/Controllers/StudentRecordController.php

2) EDIT CONTROLLER (full CRUD)
-------------------------------
Open app/Http/Controllers/StudentRecordController.php and replace with:

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Student;

class StudentRecordController extends Controller
{
    // Show all students (READ)
    public function index()
    {
        // Optionally order or paginate: Student::orderBy('id','desc')->paginate(10);
        $students = Student::all();
        return view('studentRecords', compact('students'));
    }

    // Store new student (CREATE)
    public function store(Request $request)
    {
        $request->validate([
            'name'   => 'required|string|max:255',
            'email'  => 'required|email|max:255',
            'course' => 'required|string|max:255',
        ]);

        // mass assignment - make sure $fillable is set in model
        Student::create($request->only(['name','email','course']));

        return redirect()->route('studentRecords.index')->with('success', 'Student added successfully!');
    }

    // Update existing student (UPDATE)
    public function update(Request $request, $id)
    {
        $request->validate([
            'name'   => 'required|string|max:255',
            'email'  => 'required|email|max:255',
            'course' => 'required|string|max:255',
        ]);

        $student = Student::findOrFail($id);
        $student->update($request->only(['name','email','course']));

        return redirect()->route('studentRecords.index')->with('success', 'Student updated successfully!');
    }

    // Delete student (DELETE)
    public function destroy($id)
    {
        Student::destroy($id);
        return redirect()->route('studentRecords.index')->with('success', 'Student deleted successfully!');
    }
}

Notes:
- Use $request->only([...]) to avoid unexpected fields.
- Use findOrFail to throw 404 if not found.
- Use route names for redirects.

3) REGISTER ROUTES
------------------
Open routes/web.php and add:

use App\Http\Controllers\StudentRecordController;

Route::get('/student-records', [StudentRecordController::class, 'index'])->name('studentRecords.index');
Route::post('/student-records', [StudentRecordController::class, 'store'])->name('studentRecords.store');
Route::put('/student-records/{id}', [StudentRecordController::class, 'update'])->name('studentRecords.update');
Route::delete('/student-records/{id}', [StudentRecordController::class, 'destroy'])->name('studentRecords.destroy');

Notes:
- Routes use RESTful verbs: GET, POST, PUT, DELETE.
- Ensure these routes do not conflict with other existing routes.

4) ENSURE STUDENT MODEL ALLOWS MASS ASSIGNMENT
----------------------------------------------
Open app/Models/Student.php and include $fillable:

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Student extends Model
{
    use HasFactory;

    protected $fillable = ['name', 'email', 'course'];
}

Notes:
- If $guarded exists instead, ensure it allows these fields.
- Without $fillable, Student::create(...) will cause MassAssignmentException.

5) CREATE INDEPENDENT BLADE VIEW
--------------------------------
Create the file:
resources/views/studentRecords.blade.php

Paste this complete code:

<!DOCTYPE html>
<html>
<head>
    <title>Student Records</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
        .inline-input { width: 120px; display:inline-block; margin-right:6px; }
    </style>
</head>
<body class="p-5">
    <div class="container">
        <h1 class="mb-4">Student Records (Independent Page)</h1>

        <!-- Success Message -->
        @if(session('success'))
            <div class="alert alert-success">{{ session('success') }}</div>
        @endif

        <!-- Validation Errors -->
        @if($errors->any())
            <div class="alert alert-danger">
                <ul class="mb-0">
                    @foreach($errors->all() as $error)
                        <li>{{ $error }}</li>
                    @endforeach
                </ul>
            </div>
        @endif

        <!-- Add Student Form -->
        <form action="{{ route('studentRecords.store') }}" method="POST" class="mb-4">
            @csrf
            <div class="row g-2">
                <div class="col-md-3">
                    <input type="text" name="name" class="form-control" placeholder="Name" value="{{ old('name') }}" required>
                </div>
                <div class="col-md-3">
                    <input type="email" name="email" class="form-control" placeholder="Email" value="{{ old('email') }}" required>
                </div>
                <div class="col-md-3">
                    <input type="text" name="course" class="form-control" placeholder="Course" value="{{ old('course') }}" required>
                </div>
                <div class="col-md-3">
                    <button type="submit" class="btn btn-primary w-100">Add Student</button>
                </div>
            </div>
        </form>

        <!-- Students Table -->
        <table class="table table-bordered table-striped">
            <thead class="table-dark">
                <tr>
                    <th style="width:60px">ID</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Course</th>
                    <th style="width:250px">Actions</th>
                </tr>
            </thead>
            <tbody>
                @forelse($students as $student)
                    <tr>
                        <td>{{ $student->id }}</td>
                        <td>{{ $student->name }}</td>
                        <td>{{ $student->email }}</td>
                        <td>{{ $student->course }}</td>
                        <td>
                            <!-- Inline Edit Form (simple) -->
                            <form action="{{ route('studentRecords.update', $student->id) }}" method="POST" class="d-inline">
                                @csrf
                                @method('PUT')
                                <input class="inline-input" type="text" name="name" value="{{ $student->name }}" required>
                                <input class="inline-input" type="email" name="email" value="{{ $student->email }}" required>
                                <input class="inline-input" type="text" name="course" value="{{ $student->course }}" required>
                                <button type="submit" class="btn btn-success btn-sm">Update</button>
                            </form>

                            <!-- Delete Form -->
                            <form action="{{ route('studentRecords.destroy', $student->id) }}" method="POST" class="d-inline ms-1">
                                @csrf
                                @method('DELETE')
                                <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Delete this student?')">Delete</button>
                            </form>
                        </td>
                    </tr>
                @empty
                    <tr>
                        <td colspan="5" class="text-center">No students found.</td>
                    </tr>
                @endforelse
            </tbody>
        </table>
    </div>
</body>
</html>

Notes:
- This view is independent: filename is studentRecords.blade.php
- Uses csrf tokens and method spoofing (@method('PUT') and @method('DELETE'))
- Validation errors and flash messages shown.

6) MIGRATION NOTE (ensure 'course' exists)
-------------------------------------------
If you get "Unknown column 'course'", create migration to add 'course':

php artisan make:migration add_course_to_students_table --table=students

Edit migration up() to:
Schema::table('students', function (Blueprint $table) {
    $table->string('course')->after('email');
});

Run:
php artisan migrate

If migrate shows nothing to do and column missing, use (development only):
php artisan migrate:fresh
(Warning: this drops all tables and data)

7) TEST CRUD
------------
- Start server:
  php artisan serve
- Visit: http://127.0.0.1:8000/student-records
- Create: Fill Add form → Add Student
- Read: New record shows in table
- Update: Edit the inline inputs and click Update
- Delete: Click Delete and confirm

8) VALIDATION & ERRORS
----------------------
- Validation rules in controller will redirect back with errors.
- View shows errors with @if($errors->any())...
- Use old('field') to repopulate form inputs on error.

9) SECURITY & GOOD PRACTICES
----------------------------
- Use $request->only([...]) to avoid mass assigning hidden fields.
- Escape output with {{ $var }} (Blade does this by default).
- For large apps, use Request classes: php artisan make:request StoreStudentRequest
- Use authorization to protect CRUD routes later (middleware auth).

10) OPTIONAL IMPROVEMENTS
-------------------------
- Use modal forms for edit instead of inline.
- Use pagination: Student::paginate(10) and links() in view.
- Add search/filter.
- Use resource controller for RESTful convention:
  php artisan make:controller StudentRecordController --resource
  then Route::resource('student-records', StudentRecordController::class);
  (Note: resource routes naming differs)

11) TROUBLESHOOTING
-------------------
- "Unknown column 'course'": run migration to add column.
- "SQLSTATE[HY000] [2002] Connection refused": start MySQL and check .env DB_*.
- "MassAssignmentException": ensure $fillable includes the fields.
- If redirect not showing message: check route name used in redirect.

COMMON COMMANDS
---------------
php artisan make:controller StudentRecordController
php artisan make:model Student
php artisan make:migration add_course_to_students_table --table=students
php artisan migrate
php artisan migrate:fresh
php artisan serve

SUMMARY
-------
- Controller handles logic (index/store/update/destroy).
- Routes connect URLs to controller methods.
- View studentRecords.blade.php is independent — safe to use without changing existing students.blade.php.
- Model $fillable allows mass assignment.
- Migrations change DB schema and should be used to add/remove columns.

END OF STEP 8 GUIDE
-------------------
