LARAVEL COMPLETE NOTES — STEP 6: MIGRATIONS & DATABASE SETUP
============================================================

🧠 WHAT ARE MIGRATIONS?
-----------------------
Migrations are like "version control" for your database.
They allow you to create, modify, and manage your database tables using PHP code instead of manually creating them in phpMyAdmin.

✅ Think of it like this:
   - Instead of clicking buttons to make tables,
     you just write instructions (in PHP) and Laravel will handle the database structure for you.

📦 Example:
   A migration can say “create a table named ‘students’ with name and email columns.”

---

🧩 WHERE MIGRATIONS ARE FOUND
-----------------------------
They are stored inside this folder:
   database/migrations/

Each migration file contains two main functions:

1. up() → runs when you migrate (creates the table)
2. down() → runs when you rollback (deletes the table)

Example structure:
   public function up(): void {
       Schema::create('students', function (Blueprint $table) {
           $table->id();
           $table->string('name');
           $table->string('email');
           $table->timestamps();
       });
   }

---

⚙️ STEP 1 — SET UP DATABASE CONNECTION
--------------------------------------
1. Open your project’s .env file (root of your Laravel project)
2. Find this section:

   DB_CONNECTION=mysql
   DB_HOST=127.0.0.1
   DB_PORT=3306
   DB_DATABASE=laravel
   DB_USERNAME=root
   DB_PASSWORD=

3. Change it to your database details (example):
   DB_CONNECTION=mysql
   DB_HOST=127.0.0.1
   DB_PORT=3306
   DB_DATABASE=studylanaveldb
   DB_USERNAME=root
   DB_PASSWORD=

4. Open phpMyAdmin:
   - Go to http://localhost/phpmyadmin
   - Click “New”
   - Create a database named: studylanaveldb
   - Click “Create”

✅ Laravel is now connected to your MySQL database.

---

🏗️ STEP 2 — CREATE A MIGRATION
-------------------------------
Run this command in your terminal:
   php artisan make:migration create_students_table

This will create a file inside:
   database/migrations/
with a name like:
   2025_10_05_123456_create_students_table.php

Open that file, and you’ll see something like this:

   public function up(): void {
       Schema::create('students', function (Blueprint $table) {
           $table->id();
           $table->string('name');
           $table->string('email');
           $table->timestamps();
       });
   }

This code means:
✅ Create a table named “students”
✅ Add columns:
   - id (auto increment)
   - name (text)
   - email (text)
   - timestamps (created_at and updated_at)

---

▶️ STEP 3 — RUN THE MIGRATIONS
-------------------------------
Run this command:
   php artisan migrate

Laravel will automatically create the tables in your database:
   - users
   - password_resets
   - failed_jobs
   - students (your new one)

You can confirm this by checking phpMyAdmin → studylanaveldb → tables

---

🧹 STEP 4 — MANAGING MIGRATIONS
-------------------------------
If you want to undo or redo migrations, use these commands:

🔁 Rollback last batch:
   php artisan migrate:rollback

🗑️ Reset all migrations:
   php artisan migrate:reset

🔄 Fresh start (drops all tables and migrates again):
   php artisan migrate:fresh

---

📘 EXTRA TIPS
-------------
1. Every time you make changes to your migration file, you need to run:
   php artisan migrate:fresh
   (This will refresh the database with the updated structure.)

2. If you want to add new columns later, you can create a new migration file:
   php artisan make:migration add_age_to_students_table --table=students

3. Use clear and descriptive names for your tables and migrations.

4. Avoid editing old migration files once they’re migrated to production databases — 
   instead, create a new migration that modifies the existing table.

---

✅ SUMMARY
----------
Migrations allow you to:
- Build database tables using PHP code.
- Version-control your database structure.
- Share database changes with your whole team easily.
- Reset and rebuild your database anytime with just one command.

🎯 Common Commands:
- Create a migration → php artisan make:migration create_table_name
- Run all migrations → php artisan migrate
- Rollback last → php artisan migrate:rollback
- Reset all → php artisan migrate:reset
- Fresh start → php artisan migrate:fresh

---

💡 EXAMPLE WORKFLOW
-------------------
1. Create the database in phpMyAdmin.
2. Update .env with database info.
3. Make a migration: php artisan make:migration create_students_table
4. Edit the migration file to define table columns.
5. Run: php artisan migrate
6. Check the result in phpMyAdmin.

Now your Laravel project can talk to your database! 🎉
